# name: Build & Deploy

# on:
#   push:
#     branches: [ main ]

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#       - uses: docker/setup-buildx-action@v3

#       - name: Log in to GitHub Container Registry (GHCR)
#         uses: docker/login-action@v3
#         with:
#           registry: ghcr.io
#           username: ${{ secrets.GHCR_USER }}
#           password: ${{ secrets.GHCR_LOGIN }}

#       - name: Build and push ARM64 Image
#         uses: docker/build-push-action@v5
#         with:
#           context: .
#           push: true
#           platforms: linux/arm64/v8
#           tags: ghcr.io/${{ secrets.GHCR_USER }}/doneallyback:latest

#   deploy:
#     needs: build-and-push
#     runs-on: ubuntu-latest
#     environment: prod
#     env:
#       ACTIONS_STEP_DEBUG: true
#     steps:
#       - uses: actions/checkout@v4 

#       - name: Copy Compose and Migration files to server
#         uses: appleboy/scp-action@v0.1.6
#         with:
#           host: ${{ secrets.SERVER_HOST }}
#           username: ${{ secrets.SERVER_USER }}
#           key: ${{ secrets.SERVER_SSH_KEY }}
#           source: "docker-compose.yml,migrations" 
#           target: "/srv/myapp"
#           create_path: true 
#           overwrite: true

#       - name: SSH Deploy
#         uses: appleboy/ssh-action@v0.1.9
#         with:
#           host: ${{ secrets.SERVER_HOST }}
#           username: ${{ secrets.SERVER_USER }}
#           key: ${{ secrets.SERVER_SSH_KEY }}
#           script: |
#             set -e
#             cd /srv/myapp

#             docker compose down --volumes || true

#             cat > .env <<EOL
#             POSTGRES_USER=postgres
#             POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
#             POSTGRES_DB=${{ secrets.POSTGRES_DB }}
#             JWT_SECRET=${{ secrets.JWT_SECRET }}
#             APP_ENV=production

#             PGHOST=db           
#             PGPORT=5432         
#             # PGBOUNCER_DATABASE_URL=postgres://postgres:${{ secrets.POSTGRES_PASSWORD }}@db:5432/${{ secrets.POSTGRES_DB }}
            
#             DATABASE_URL=postgres://postgres:${{ secrets.POSTGRES_PASSWORD }}@pgbouncer:5432/${{ secrets.POSTGRES_DB }}?sslmode=disable
#             EOL

#             echo "${{ secrets.GHCR_LOGIN }}" | docker login ghcr.io -u ${{ secrets.GHCR_USER }} --password-stdin
            
#             docker compose pull

#             docker compose up -d db 
#             docker compose logs -f db | grep -m 1 'database system is ready to accept connections'
            
#             mkdir -p application_logs
#             sudo chown -R 1000:1000 application_logs
#             # sudo chmod -R 777 application_logs 

#             mkdir -p public/images
#             sudo chown -R 1000:1000 public/images
            
#             docker compose run --rm db \
#               sh -c 'export PGPASSWORD=$POSTGRES_PASSWORD; for f in /migrations/*.sql; do echo "Running $f..."; psql -h db -U postgres -d $POSTGRES_DB -f "$f"; done'

#             docker compose up -d

#             echo "Waiting 10 seconds for Nginx to fully start..."
#             sleep 10

#             docker compose exec acme-companion /bin/bash -c "touch /etc/acme.sh/issue.sh" || true


#             docker logout ghcr.io
#             docker image prune -f
